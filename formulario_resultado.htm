<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Formulario</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            font-size: 100%;
        }
        body {
            font-family: Verdana, Geneva, Tahoma, sans-serif;
            background-color: #F2F2F2;
        }
        header h1 {
            text-align: center;
            font-size: 1.3rem;
            margin: 20px;
        }
        main {
            /* Podemos centrar el formulario de la manera clásica: dándole un width y margin: auto,
            o usar flex */
            display: flex;
            justify-content: center;
        }
        form {
            /* Nuestro formulario tiene 2 columnas claras de diseño y alguna
            fila que ocupa dos columnas. Por ello, la mejor opción es grid */
            display: grid;
            /* La segunda columna que ocupe el doble del espacio sobrante, aunque en este caso,
            al usar width: fit-content; no sería necesario ese doble */
            grid-template-columns: 1fr 2fr;
            /* Espacio entre columnas y filas */
            gap: 30px;
            /* Que el formulario solo ocupe lo que sun contenido */
            width: fit-content;
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 4px rgb(175, 173, 173);
        }
        /* Sería mejor no usar form div, usando clases o ids en su lugar */
        input[type="submit"], form div  {
            /* Que ocupe dos filas (tres líneas) */
            grid-column: 1 / 3; /* o grid-column: 1 / span 2; */
        }
        input[type="submit"] {
            background-color: rgb(6, 175, 65);
            color:white;
            padding: 10px;
        }
        input, select {
            padding: 5px;
            border-radius: 5px;
            border: 1px solid #c7c4c4;
        }
        /* Como el texto de su label ocupa dos líneas, al estar en un grid, por defecto
        este input sería un poco más alto que los anteriores. Con esta opción, además
        de centarrlo verticalmente, ya no ocupará más (el valor por defecto es stretch) */
        #contraseñaRepetida {
            align-self: center;
        }
        /* Hacemos más pequeño el cuadro de la edad */
        #edad {
            width: 20%;
        }
        /* Un espacio entre el checkbox y su texto */
        #acepto {
            margin-right: 20px;
        }
        /* Los inputs del formulario que sean requeridos, los ponemos con un color
        de fondo diferente */
        form :required {
            background-color: rgb(200, 234, 200);
        }
        /* Mejor usar clases o ids pues a saber quien es este divs y a que otros
        divs afectamos */
        form div {
            /* Lo colocamos en la segunda columna */
            grid-column: 2;
        }
        .aviso {
            /* Podemos usar display o visibility para ocultar un elemento. La diferencia
            principal es que con visibility, el espacio que ocupa se mantiene, mientras
            que con display no. Por ello al mostarlo u ocultarlo con display se desplaza
            el resto del contenido */
            /* display: none; */
            visibility: hidden;
            font-size: .8rem;
            padding: 0;
            margin: 0;
        }
        /* El p que sea primer hermano de un input requerido (con el atributo required) */
        :required + p {
            color: red;
        }
        /* Cuando el contenido del input no sea válido, mostramos el p */
        #nombre:invalid + p, #contraseña:invalid + p  {
            /* display: block; */
            visibility: visible;
        }
        /* Un margen derecho enter el radio y su texto */
        [name="situacion"] { /* o [type="radio"] { */
            margin-right: 10px;
        }
        fieldset {
            /* Que ocupe las dos columnas (tres líneas) */
            grid-column: 1 / 3; /* o grid-column: 1 / span 2; */
            padding: 10px;
        }
        .aceptar {
            text-align: right;
        }
        .aceptar a {
            color: black;
        }
        /* Que ocupe las dos columnas (tres líneas) */
        .fichero {
            grid-column: 1 / 3; /* o grid-column: 1 / span 2; */
        }
        /* Un input type="file" muestra por defecto un texto que varía según el navegador.
        Suele poner 'seleccione el fichero' y luego, cuando se escoje uno, su nombre.
        Si no queremos ese texto, debemos recurrir a ocultar el input y usar su label, el cual
        debemos diseñar con CSS para que parezca un botón.
        Esto funciona ya que, al asociar un label con un input, pulsar en el label es como
        hacerlo en el input. Podemos probarlo también que es así en el label de Aceptar las condiciones */
        label[for="curriculum"] {
            border-top: 1px solid lightgray;
            border-bottom: 1px solid rgb(165, 164, 164);
            border-right: 1px solid rgb(165, 164, 164);
            border-left: 1px solid lightgray;
            padding: 5px;
            /* Lo colocamos en la primera columna */
            grid-column: 1;
            /* Cambiamos el puntero del ratón por una mano. No suele ser lo habitual con
            un botón, pero así probamos esta propiedad */
            cursor: pointer;
        }
        label[for="curriculum"]:hover {
            background-color: #c7c4c4;
        }
        /* Ocultamos el input */
        input[type="file"] {
            visibility: hidden;
        }
        /* Que ocupe las dos columnas (tres líneas) */
        .comentarios {
            grid-column: 1 / 3; /* o grid-column: 1 / span 2; */
        }
        /* Un textarea es de tipo inline, con lo que, para darle ancho y alto, debemos
        convertirlo a bloque o inline-block */
        .comentarios textarea {
            display: block; 
            width: 100%;
            height: 10em;
        }
        .salario {
            /* En este caso no se va a notar porque el texto en salario es largo,
            pero alineamos su texto al final (derecha en un idioma occidental) */
            text-align: end;
        }
        /* Con where podemos seleccionar un elemento que sea de una cosa u otra */
        input:where([name="nombre"],[name="contraseña"]) {
            width: 100%;
        }
    </style>
  </head>
  <body>
    <header><h1>Registro de usuario</h1></header>
    <main>
      <form action="">
        <!-- Para asociar un label con su control debemos darle en el atributo for,
        el mismo nombre que en el id del control -->
        <label for="nombre">Nombre:</label>
        <div>
            <!-- con autofocus hacemos que obtenga el foco al cargarse la página, es decir,
            que el cursor esté en este control para que el usuario pueda escribir sin 
            tener que hacer clic con el ratón o usar el tabulador.
            Hemos puesto un ejemplo del atributo pattern que permite limitar, mediante
            expresiones regulares, los valores aceptados. En este caso admitimos cualquier letra
            inglesa en mayúsculas o minúsculas en una cantidad de 3 o más.
            Con el atributo required hacemos que sea obligatorio -->
            <input type="text" name="nombre" id="nombre" autofocus required minlength="3" pattern="[a-zA-Z]{3,}"/>
            <!-- Con CSS haremos que este aviso solo se muestre cuando sea necesario -->
            <p class="aviso">El nombre es obligatorio</p>
        </div>
        <label for="apellidos">Apellidos:</label>
        <input type="text" name="apellidos" id="apellidos" />
        <label for="edad">Edad:</label>
        <!-- Si establecemos un mínimo conviene que value no comience en cero o nada -->
        <input type="number" name="edad" id="edad" min="18" value="18" required/>
        <label for="sexo">Sexo:</label>
        <select name="sexo" id="sexo">
          <option>Seleccionar</option>
          <option>Masculino</option>
          <option>Femenino</option>
          <option>Otro</option>
        </select>
        <label for="email">Email:</label>
        <!-- Recordemos que podemos usar, en navegadores y sistemas modernos, 
        caracteres unicode que se muestran como imágenes.
        placeholder mostrará esa imagen mientras el usuario no escriba en el control -->
        <input type="email" name="email" id="email" placeholder="✉️"/>
        <!-- Con el atributo acceskey indicamos una tecla de acceso rápido, que nos
        permite que el control gane el foco; hemos elegido la tecla C. Dependiendo del
         navegador y sistema hay que pulsar CTRl + ALT + C, ALT + MAY + C, .... -->
        <label for="contraseña" accesskey="C">Contraseña:</label>
        <div>
            <input type="password" name="contraseña" id="contraseña" required/>
            <p class="aviso">Debe tener al menos 6 caracteres</p>
        </div>
        <label for="contraseñaRepetida">Confirmar contraseña:</label>
        <input
          type="password"
          name="contraseñaRepetida"
          id="contraseñaRepetida"
          placeholder="Pon tu contraseña de nuevo"
          required
        />
        <fieldset>
            <legend>Situación laboral</legend>
            <!-- Todos los radios deben tener el mismo name para que no se puedan marcar
            dos; el ide debe ser diferente -->
            <input type="radio" name="situacion" id="empleado"><label for="empleado">Empleado</label>
            <input type="radio" name="situacion" id="desempleado"><label for="paro">desempleado</label>
            <input type="radio" name="situacion" id="pensionista"><label for="pensionista">pensionista</label>
        </fieldset>
        <div class="fichero">
            <label for="curriculum">Adjuntar curriculum</label>
            <input type="file" name="curriculum" id="curriculum" accept="application/pdf">
        </div>
        <div class="comentarios">
            <label for="comentarios">Comentarios</label>
            <textarea name="comentarios" id="comentarios"></textarea>
        </div>
        <label for="salario" class="salario">Salario 2000 - 5000 (€)</label>
        <input type="range" name="salario" id="salario" min="2000" max="5000">
        <div class="aceptar">
            <input type="checkbox" name="acepto" id="acepto"><label for="acepto">Acepto las <a href="condiciones.htm">condiciones</a></label>
        </div>
        <!-- Cuando se pulse el botón de enviar, el navegador comprobará si los datos
        son corerctos o si faltan -->
        <input type="submit" value="Registrarse" />
      </form>
    </main>
  </body>
</html>
